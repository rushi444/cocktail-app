### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

"""Comments for recipes, created by users"""
type Comment {
  createdBy: User!
  id: Int!
  recipe: Recipe!
  recipeId: Int!
  text: String!
  userId: Int!
}

input CommentCreateManyWithoutCreatedByInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutCreatedByInput!]
}

input CommentCreateManyWithoutRecipeInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutRecipeInput!]
}

input CommentCreateWithoutCreatedByInput {
  recipe: RecipeCreateOneWithoutCommentsInput!
  text: String!
}

input CommentCreateWithoutRecipeInput {
  createdBy: UserCreateOneWithoutCommentsInput!
  text: String!
}

input CommentFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  id: IntFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  recipeId: IntFilter
  text: StringFilter
  userId: IntFilter
}

input CommentUpdateManyDataInput {
  id: Int
  text: String
}

input CommentUpdateManyWithoutCreatedByInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutCreatedByInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input CommentUpdateManyWithoutRecipeInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutRecipeInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutRecipeInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutRecipeInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateWithoutCreatedByDataInput {
  id: Int
  recipe: RecipeUpdateOneRequiredWithoutCommentsInput
  text: String
}

input CommentUpdateWithoutRecipeDataInput {
  createdBy: UserUpdateOneRequiredWithoutCommentsInput
  id: Int
  text: String
}

input CommentUpdateWithWhereUniqueWithoutCreatedByInput {
  data: CommentUpdateWithoutCreatedByDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutRecipeInput {
  data: CommentUpdateWithoutRecipeDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutCreatedByInput {
  create: CommentCreateWithoutCreatedByInput!
  update: CommentUpdateWithoutCreatedByDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutRecipeInput {
  create: CommentCreateWithoutRecipeInput!
  update: CommentUpdateWithoutRecipeDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  createdBy: UserWhereInput
  id: IntFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  recipe: RecipeWhereInput
  recipeId: IntFilter
  text: StringFilter
  userId: IntFilter
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

"""One of many Ingredients for a Recipe"""
type Ingredient {
  amount: String!
  id: Int!
  name: String!
  recipe: Recipe!
  recipeId: Int!
}

input IngredientCreateManyWithoutRecipeInput {
  connect: [IngredientWhereUniqueInput!]
  create: [IngredientCreateWithoutRecipeInput!]
}

input IngredientCreateWithoutRecipeInput {
  amount: String!
  name: String!
}

input IngredientFilter {
  every: IngredientWhereInput
  none: IngredientWhereInput
  some: IngredientWhereInput
}

input IngredientInputType {
  amount: String!
  name: String!
}

input IngredientOrderByInput {
  amount: OrderByArg
  id: OrderByArg
  name: OrderByArg
  recipeId: OrderByArg
}

input IngredientScalarWhereInput {
  amount: StringFilter
  AND: [IngredientScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [IngredientScalarWhereInput!]
  OR: [IngredientScalarWhereInput!]
  recipeId: IntFilter
}

input IngredientUpdateManyDataInput {
  amount: String
  id: Int
  name: String
}

input IngredientUpdateManyWithoutRecipeInput {
  connect: [IngredientWhereUniqueInput!]
  create: [IngredientCreateWithoutRecipeInput!]
  delete: [IngredientWhereUniqueInput!]
  deleteMany: [IngredientScalarWhereInput!]
  disconnect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithWhereUniqueWithoutRecipeInput!]
  updateMany: [IngredientUpdateManyWithWhereNestedInput!]
  upsert: [IngredientUpsertWithWhereUniqueWithoutRecipeInput!]
}

input IngredientUpdateManyWithWhereNestedInput {
  data: IngredientUpdateManyDataInput!
  where: IngredientScalarWhereInput!
}

input IngredientUpdateWithoutRecipeDataInput {
  amount: String
  id: Int
  name: String
}

input IngredientUpdateWithWhereUniqueWithoutRecipeInput {
  data: IngredientUpdateWithoutRecipeDataInput!
  where: IngredientWhereUniqueInput!
}

input IngredientUpsertWithWhereUniqueWithoutRecipeInput {
  create: IngredientCreateWithoutRecipeInput!
  update: IngredientUpdateWithoutRecipeDataInput!
  where: IngredientWhereUniqueInput!
}

input IngredientWhereInput {
  amount: StringFilter
  AND: [IngredientWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  recipe: RecipeWhereInput
  recipeId: IntFilter
}

input IngredientWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""Users can like recipes"""
type Like {
  id: Int!
  likedBy: User!
  recipe: Recipe!
  recipeId: Int!
  userId: Int!
}

input LikeCreateInput {
  likedBy: UserCreateOneWithoutLikedRecipesInput!
  recipe: RecipeCreateOneWithoutLikeInput!
}

input LikeCreateManyWithoutLikedByInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutLikedByInput!]
}

input LikeCreateManyWithoutRecipeInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutRecipeInput!]
}

input LikeCreateWithoutLikedByInput {
  recipe: RecipeCreateOneWithoutLikeInput!
}

input LikeCreateWithoutRecipeInput {
  likedBy: UserCreateOneWithoutLikedRecipesInput!
}

input LikeFilter {
  every: LikeWhereInput
  none: LikeWhereInput
  some: LikeWhereInput
}

input LikeScalarWhereInput {
  AND: [LikeScalarWhereInput!]
  id: IntFilter
  NOT: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  recipeId: IntFilter
  userId: IntFilter
}

input LikeUpdateManyDataInput {
  id: Int
}

input LikeUpdateManyWithoutLikedByInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutLikedByInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutLikedByInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutLikedByInput!]
}

input LikeUpdateManyWithoutRecipeInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutRecipeInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutRecipeInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutRecipeInput!]
}

input LikeUpdateManyWithWhereNestedInput {
  data: LikeUpdateManyDataInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateWithoutLikedByDataInput {
  id: Int
  recipe: RecipeUpdateOneRequiredWithoutLikeInput
}

input LikeUpdateWithoutRecipeDataInput {
  id: Int
  likedBy: UserUpdateOneRequiredWithoutLikedRecipesInput
}

input LikeUpdateWithWhereUniqueWithoutLikedByInput {
  data: LikeUpdateWithoutLikedByDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutRecipeInput {
  data: LikeUpdateWithoutRecipeDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutLikedByInput {
  create: LikeCreateWithoutLikedByInput!
  update: LikeUpdateWithoutLikedByDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutRecipeInput {
  create: LikeCreateWithoutRecipeInput!
  update: LikeUpdateWithoutRecipeDataInput!
  where: LikeWhereUniqueInput!
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  id: IntFilter
  likedBy: UserWhereInput
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  recipe: RecipeWhereInput
  recipeId: IntFilter
  userId: IntFilter
}

input LikeWhereUniqueInput {
  id: Int
}

type Mutation {
  createComment(recipeId: Int!, text: String!): Comment!
  createIngredient(amount: String!, name: String!, recipeId: Int!): Ingredient!
  createLike(recipeId: Int!): Like!
  createOneLike(data: LikeCreateInput!): Like!
  createRecipe(imageUrl: String, ingredients: [IngredientInputType!], name: String!): Recipe!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  login(email: String!, password: String!): AuthPayload!
  register(email: String!, name: String, password: String!): User!
  unlike(where: LikeWhereUniqueInput!): Like
  updateOneRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int, skip: Int): [Comment!]!
  ingredients(after: IngredientWhereUniqueInput, before: IngredientWhereUniqueInput, first: Int, last: Int, skip: Int, where: IngredientWhereInput): [Ingredient!]!
  likedDrinks: [Recipe!]!
  likes(after: LikeWhereUniqueInput, before: LikeWhereUniqueInput, first: Int, last: Int, skip: Int): [Like!]!
  me: User!
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipes(after: RecipeWhereUniqueInput, before: RecipeWhereUniqueInput, first: Int, last: Int, orderBy: RecipeOrderByInput, skip: Int, where: RecipeWhereInput): [Recipe!]!
  search(searchText: String!): [Recipe!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int, where: UserWhereInput): [User!]!
}

"""A single Recipe"""
type Recipe {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int, skip: Int): [Comment!]!
  createdAt: DateTime!
  createdBy: User!
  id: Int!
  imageUrl: String!
  ingredients(after: IngredientWhereUniqueInput, before: IngredientWhereUniqueInput, first: Int, last: Int, orderBy: IngredientOrderByInput, skip: Int, where: IngredientWhereInput): [Ingredient!]!

  """bool if user has liked this recipe"""
  likedByUser: Boolean!
  name: String!

  """number of likes recipe has"""
  numberOfLikes: Int!
  userId: Int!
}

input RecipeCreateManyWithoutCreatedByInput {
  connect: [RecipeWhereUniqueInput!]
  create: [RecipeCreateWithoutCreatedByInput!]
}

input RecipeCreateOneWithoutCommentsInput {
  connect: RecipeWhereUniqueInput
  create: RecipeCreateWithoutCommentsInput
}

input RecipeCreateOneWithoutLikeInput {
  connect: RecipeWhereUniqueInput
  create: RecipeCreateWithoutLikeInput
}

input RecipeCreateWithoutCommentsInput {
  createdAt: DateTime
  createdBy: UserCreateOneWithoutRecipesInput!
  imageUrl: String
  ingredients: IngredientCreateManyWithoutRecipeInput
  Like: LikeCreateManyWithoutRecipeInput
  name: String!
}

input RecipeCreateWithoutCreatedByInput {
  comments: CommentCreateManyWithoutRecipeInput
  createdAt: DateTime
  imageUrl: String
  ingredients: IngredientCreateManyWithoutRecipeInput
  Like: LikeCreateManyWithoutRecipeInput
  name: String!
}

input RecipeCreateWithoutLikeInput {
  comments: CommentCreateManyWithoutRecipeInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutRecipesInput!
  imageUrl: String
  ingredients: IngredientCreateManyWithoutRecipeInput
  name: String!
}

input RecipeFilter {
  every: RecipeWhereInput
  none: RecipeWhereInput
  some: RecipeWhereInput
}

input RecipeOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  imageUrl: OrderByArg
  name: OrderByArg
  userId: OrderByArg
}

input RecipeScalarWhereInput {
  AND: [RecipeScalarWhereInput!]
  comments: CommentFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageUrl: StringFilter
  ingredients: IngredientFilter
  Like: LikeFilter
  name: StringFilter
  NOT: [RecipeScalarWhereInput!]
  OR: [RecipeScalarWhereInput!]
  userId: IntFilter
}

input RecipeUpdateInput {
  comments: CommentUpdateManyWithoutRecipeInput
  createdAt: DateTime
  createdBy: UserUpdateOneRequiredWithoutRecipesInput
  id: Int
  imageUrl: String
  ingredients: IngredientUpdateManyWithoutRecipeInput
  Like: LikeUpdateManyWithoutRecipeInput
  name: String
}

input RecipeUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  imageUrl: String
  name: String
}

input RecipeUpdateManyWithoutCreatedByInput {
  connect: [RecipeWhereUniqueInput!]
  create: [RecipeCreateWithoutCreatedByInput!]
  delete: [RecipeWhereUniqueInput!]
  deleteMany: [RecipeScalarWhereInput!]
  disconnect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  update: [RecipeUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [RecipeUpdateManyWithWhereNestedInput!]
  upsert: [RecipeUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input RecipeUpdateManyWithWhereNestedInput {
  data: RecipeUpdateManyDataInput!
  where: RecipeScalarWhereInput!
}

input RecipeUpdateOneRequiredWithoutCommentsInput {
  connect: RecipeWhereUniqueInput
  create: RecipeCreateWithoutCommentsInput
  update: RecipeUpdateWithoutCommentsDataInput
  upsert: RecipeUpsertWithoutCommentsInput
}

input RecipeUpdateOneRequiredWithoutLikeInput {
  connect: RecipeWhereUniqueInput
  create: RecipeCreateWithoutLikeInput
  update: RecipeUpdateWithoutLikeDataInput
  upsert: RecipeUpsertWithoutLikeInput
}

input RecipeUpdateWithoutCommentsDataInput {
  createdAt: DateTime
  createdBy: UserUpdateOneRequiredWithoutRecipesInput
  id: Int
  imageUrl: String
  ingredients: IngredientUpdateManyWithoutRecipeInput
  Like: LikeUpdateManyWithoutRecipeInput
  name: String
}

input RecipeUpdateWithoutCreatedByDataInput {
  comments: CommentUpdateManyWithoutRecipeInput
  createdAt: DateTime
  id: Int
  imageUrl: String
  ingredients: IngredientUpdateManyWithoutRecipeInput
  Like: LikeUpdateManyWithoutRecipeInput
  name: String
}

input RecipeUpdateWithoutLikeDataInput {
  comments: CommentUpdateManyWithoutRecipeInput
  createdAt: DateTime
  createdBy: UserUpdateOneRequiredWithoutRecipesInput
  id: Int
  imageUrl: String
  ingredients: IngredientUpdateManyWithoutRecipeInput
  name: String
}

input RecipeUpdateWithWhereUniqueWithoutCreatedByInput {
  data: RecipeUpdateWithoutCreatedByDataInput!
  where: RecipeWhereUniqueInput!
}

input RecipeUpsertWithoutCommentsInput {
  create: RecipeCreateWithoutCommentsInput!
  update: RecipeUpdateWithoutCommentsDataInput!
}

input RecipeUpsertWithoutLikeInput {
  create: RecipeCreateWithoutLikeInput!
  update: RecipeUpdateWithoutLikeDataInput!
}

input RecipeUpsertWithWhereUniqueWithoutCreatedByInput {
  create: RecipeCreateWithoutCreatedByInput!
  update: RecipeUpdateWithoutCreatedByDataInput!
  where: RecipeWhereUniqueInput!
}

input RecipeWhereInput {
  AND: [RecipeWhereInput!]
  comments: CommentFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  id: IntFilter
  imageUrl: StringFilter
  ingredients: IngredientFilter
  Like: LikeFilter
  name: StringFilter
  NOT: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  userId: IntFilter
}

input RecipeWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  """New Comment Subscription"""
  newComment(recipeId: Int!): Comment!
}

"""Single User for cocktail-app"""
type User {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int, skip: Int): [Comment!]!
  email: String!
  id: Int!

  """Liked Recipe Ids by user"""
  likedIds: [Int!]!
  likedRecipes(after: LikeWhereUniqueInput, before: LikeWhereUniqueInput, first: Int, last: Int, skip: Int): [Like!]!
  name: String
  recipes(after: RecipeWhereUniqueInput, before: RecipeWhereUniqueInput, first: Int, last: Int, orderBy: RecipeOrderByInput, skip: Int): [Recipe!]!
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutLikedRecipesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikedRecipesInput
}

input UserCreateOneWithoutRecipesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecipesInput
}

input UserCreateWithoutCommentsInput {
  email: String!
  likedRecipes: LikeCreateManyWithoutLikedByInput
  name: String
  password: String!
  recipes: RecipeCreateManyWithoutCreatedByInput
}

input UserCreateWithoutLikedRecipesInput {
  comments: CommentCreateManyWithoutCreatedByInput
  email: String!
  name: String
  password: String!
  recipes: RecipeCreateManyWithoutCreatedByInput
}

input UserCreateWithoutRecipesInput {
  comments: CommentCreateManyWithoutCreatedByInput
  email: String!
  likedRecipes: LikeCreateManyWithoutLikedByInput
  name: String
  password: String!
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutLikedRecipesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikedRecipesInput
  update: UserUpdateWithoutLikedRecipesDataInput
  upsert: UserUpsertWithoutLikedRecipesInput
}

input UserUpdateOneRequiredWithoutRecipesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecipesInput
  update: UserUpdateWithoutRecipesDataInput
  upsert: UserUpsertWithoutRecipesInput
}

input UserUpdateWithoutCommentsDataInput {
  email: String
  id: Int
  likedRecipes: LikeUpdateManyWithoutLikedByInput
  name: String
  password: String
  recipes: RecipeUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutLikedRecipesDataInput {
  comments: CommentUpdateManyWithoutCreatedByInput
  email: String
  id: Int
  name: String
  password: String
  recipes: RecipeUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutRecipesDataInput {
  comments: CommentUpdateManyWithoutCreatedByInput
  email: String
  id: Int
  likedRecipes: LikeUpdateManyWithoutLikedByInput
  name: String
  password: String
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutLikedRecipesInput {
  create: UserCreateWithoutLikedRecipesInput!
  update: UserUpdateWithoutLikedRecipesDataInput!
}

input UserUpsertWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput!
  update: UserUpdateWithoutRecipesDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  comments: CommentFilter
  email: StringFilter
  id: IntFilter
  likedRecipes: LikeFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  recipes: RecipeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
